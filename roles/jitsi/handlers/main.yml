---
- name: ensure compose down
  docker_compose:
    project_src: "{{ project_root }}"
    state: absent
  ignore_errors: yes
  when: compose_file.stat.exists

- name: init templates
  copy:
    src: "{{ item.file }}"
    dest: "{{ item.destination }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: "{{ item.mode }}"
    remote_src: yes
  become: yes
  loop:
    - { file: "{{ project_root }}/env.example", destination: "{{ project_root }}/.env", owner: "{{ server_user }}", mode: "0755" }
    - { file: "{{ project_root }}/docker-compose.yml.example", destination: "{{ project_root }}/docker-compose.yml", owner: "{{ server_user }}", mode: "0755" }
  notify:
    - glob data
    - cleanup
    - init directories
    - ensure passwords
    - enable auth in env
    - compose down
    - compose up
    - credentials
    
- name: glob data
  become: yes
  find:
    paths: "{{ project_root }}/data"
    patterns: '*'
    hidden: yes
  register: directory_content_result

- name: cleanup
  become: yes
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ directory_content_result.files }}"

- name: init directories
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    state: directory
  loop:
    - { path: "{{ project_root }}/data/web", owner: "{{ server_user }}" }
    - { path: "{{ project_root }}/data/images", owner: "{{ server_user }}" }
    - { path: "{{ project_root }}/data/transcripts", owner: "{{ server_user }}" }
    - { path: "{{ project_root }}/data/prosody/config", owner: "{{ server_user }}" }
    - { path: "{{ project_root }}/data/prosody/prosody-plugins-custom", owner: "{{ server_user }}" }
    - { path: "{{ project_root }}/data/jicofo", owner: "{{ server_user }}" }
    - { path: "{{ project_root }}/data/jvb", owner: "{{ server_user }}" }

- name: ensure passwords
  lineinfile:
    path: "{{ project_root }}/.env"
    state: "{{ item.state }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    insertafter: EOF
  become: yes
  loop:
    - { regexp: '^JICOFO_AUTH_PASSWORD=(.*)', line: "JICOFO_AUTH_PASSWORD={{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}", state: "present" }
    - { regexp: '^JVB_AUTH_PASSWORD=(.*)', line: "JVB_AUTH_PASSWORD={{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}", state: "present" }
    - { regexp: '^JIGASI_XMPP_PASSWORD=(.*)', line: "JIGASI_XMPP_PASSWORD={{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}", state: "present" }
    - { regexp: '^JIBRI_RECORDER_PASSWORD=(.*)', line: "JIBRI_RECORDER_PASSWORD={{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}", state: "present" }
    - { regexp: '^JIBRI_XMPP_PASSWORD=(.*)', line: "JIBRI_XMPP_PASSWORD={{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}", state: "present" }
    - { regexp: '^JICOFO_COMPONENT_SECRET=(.*)', line: "JICOFO_COMPONENT_SECRET={{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}", state: "present" }
  notify:
    - compose down
    - compose up

- name: ensure env configs
  lineinfile:
    path: "{{ project_root }}/.env"
    state: "{{ item.state }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    insertafter: EOF
  become: yes
  loop:
    - { regexp: '(.*)CONFIG=(.*)', line: 'CONFIG=./data', state: "present" }
    - { regexp: '(.*)HTTP_PORT=(.*)', line: 'HTTP_PORT={{ config_tcp_port }}', state: "present" }
    - { regexp: '(.*)ENABLE_LOBBY=(.*)', line: 'ENABLE_LOBBY={{ config_lobby }}', state: "present" }
    - { regexp: '(.*)ETHERPAD_URL_BASE=(.*)', line: 'ETHERPAD_URL_BASE=http://etherpad.meet.jitsi:9001', state: "present" }
    - { regexp: '#PUBLIC_URL=(.*)', line: 'PUBLIC_URL=https://{{ nginx_domain_name }}', state: "present" }
    - { regexp: '(.*)RESTART_POLICY=(.*)', line: 'RESTART_POLICY={{ config_restart_policy }}', state: "present" }
    - { regexp: 'COMPOSE_PROJECT_NAME=(.*)', line: 'COMPOSE_PROJECT_NAME={{ docker_config_project }}', state: "present" }
  notify:
    - compose down
    - compose up

- name: enable auth in env
  lineinfile:
    path: "{{ project_root }}/.env"
    state: "{{ item.state }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    insertafter: EOF
  become: yes
  loop:
    - { regexp: '(.*)ENABLE_AUTH=(.*)', line: 'ENABLE_AUTH=1', state: "present" }
    - { regexp: '(.*)ENABLE_GUESTS=(.*)', line: 'ENABLE_GUESTS=1', state: "present" }
    - { regexp: '(.*)AUTH_TYPE=(.*)', line: 'AUTH_TYPE=internal', state: "present" }
  notify:
    - compose down
    - compose up
    - credentials
  when: jitsi_password != None

- name: ensure compose configs
  lineinfile:
    path: "{{ project_root }}/docker-compose.yml"
    state: "{{ item.state }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  become: yes
  loop:
    - { regexp: '(.*)\$\{HTTP_PORT\}:80(.*)', line: '            - ''127.0.0.1:${HTTP_PORT}:80''', state: "present" }
    - { regexp: '(.*)\$\{HTTPS_PORT\}:443(.*)', line: '            - ''127.0.0.1:${HTTPS_PORT}:443''', state: "present"  }
    - { regexp: '(.*)JVB_ENABLE_APIS(.*)', line: '            - JVB_ENABLE_APIS=rest,colibri', state: "present"  }
  notify:
    - compose down
    - compose up

- name: reload nginx
  service:
    name: nginx
    state: reloaded

- name: compose down
  docker_compose:
    project_src: "{{ project_root }}"
    state: absent
  ignore_errors: yes

- name: compose up
  docker_compose:
    project_src: "{{ project_root }}"
    state: present
    pull: yes

- name: credentials
  shell: "docker-compose exec -T prosody prosodyctl --config /config/prosody.cfg.lua register {{ jitsi_username }} meet.jitsi {{ jitsi_password }}"
  args:
    chdir: "{{ project_root }}"
  become: yes
  when: jitsi_password != None